<!-- Optimized Free Samples Display -->
<!-- Only products with configured Custom Fields -->
{% if product.metafields.custom.lehrerexemplar_id and product.metafields.custom.freiexemplar_id %}
  <div class="rk-free-samples">
    <!-- Teacher Samples -->
    <div class="quantity-selector-container">
      <div>
        <label for="rk-teacher-samples">Lehrer:innenexemplar (kostenfrei)</label>
        <div>Bei Bestellungen in Klassen- bzw. Gruppenstärke können Sie für Ihren Unterricht Lehrer:innen-Exemplare in Anspruch nehmen.</div>
        <quantity-selector-component class="quantity-selector rk-quantity-selector">
          <button
            class="button quantity-minus button-unstyled"
            type="button"
            name="minus"
            on:click="/decreaseQuantity"
            ref="quantityButtons[]"
          >
            <span class="visually-hidden">{{ 'accessibility.decrease_quantity' | t }}</span>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="95.695" height="86.121" viewBox="0 0 95.695 86.121">
              <defs>
                <clipPath id="clip-path-minus-teacher">
                  <rect width="56.856" height="51.485" transform="translate(0 0)" fill="none" stroke="#3f9fb8" stroke-width="2"/>
                </clipPath>
                <filter id="filter-minus-teacher" x="0" y="3.836" width="95.695" height="82.285" filterUnits="userSpaceOnUse">
                  <feOffset dy="7" input="SourceAlpha"/>
                  <feGaussianBlur stdDeviation="13" result="blur"/>
                  <feFlood flood-opacity="0.051"/>
                  <feComposite operator="in" in2="blur"/>
                  <feComposite in="SourceGraphic"/>
                </filter>
              </defs>
              <g transform="translate(9.771)">
                <g transform="matrix(0.819, 0.574, -0.574, 0.819, 29.531, 0)" clip-path="url(#clip-path-minus-teacher)">
                  <path d="M22.866,41.126C9.956,41.32,4.344,34.281,1.4,24.5a51.483,51.483,0,0,1-1.08-5.228,16.88,16.88,0,0,1-.209-4.949A38.01,38.01,0,0,1,.733,9.861,12.921,12.921,0,0,1,8.819.9C12.5-.533,18.508-.064,22.238.974,31.624,3.585,38.972,8.125,43.4,15.682c1.837,3.139,3.185,8.64,1.5,12.931-2.445,6.222-8.445,9.362-15.127,11.363a45.88,45.88,0,0,1-4.6.941l-2.3.209" transform="translate(5.596 5.178)" fill="none" stroke="#3f9fb8" stroke-width="2" fill-rule="evenodd"/>
                </g>
                <g transform="matrix(1, 0, 0, 1, -9.77, 0)" filter="url(#filter-minus-teacher)">
                  <path d="M11.179-4.2H1.092V-7.484H17.787V-4.2Z" transform="translate(38.41 43.82)" fill="#3f9fb8" stroke="#3f9fb8" stroke-width="1"/>
                </g>
              </g>
            </svg>
          </button>
          <input
            type="number"
            id="rk-teacher-samples"
            name="teacher-samples"
            value="0"
            min="0"
            on:blur="/setQuantity"
            on:focus="/selectInputValue"
            ref="quantityInput"
            aria-label="Lehrerexemplare Anzahl"
          >
          <button
            class="button quantity-plus button-unstyled"
            type="button"
            name="plus"
            on:click="/increaseQuantity"
            ref="quantityButtons[]"
          >
            <span class="visually-hidden">{{ 'accessibility.increase_quantity' | t }}</span>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="95.695" height="95.502" viewBox="0 0 95.695 95.502">
              <defs>
                <clipPath id="clip-path-plus-teacher">
                  <rect width="56.856" height="51.485" transform="translate(0 0)" fill="none" stroke="#3f9fb8" stroke-width="2"/>
                </clipPath>
                <filter id="filter-plus-teacher" x="0" y="0" width="95.695" height="95.502" filterUnits="userSpaceOnUse">
                  <feOffset dy="7" input="SourceAlpha"/>
                  <feGaussianBlur stdDeviation="13" result="blur"/>
                  <feFlood flood-opacity="0.051"/>
                  <feComposite operator="in" in2="blur"/>
                  <feComposite in="SourceGraphic"/>
                </filter>
              </defs>
              <g transform="translate(9.771 2.773)">
                <g transform="matrix(0.819, 0.574, -0.574, 0.819, 29.531, 0)" clip-path="url(#clip-path-plus-teacher)">
                  <path d="M22.866,41.126C9.956,41.32,4.344,34.281,1.4,24.5a51.483,51.483,0,0,1-1.08-5.228,16.88,16.88,0,0,1-.209-4.949A38.01,38.01,0,0,1,.733,9.861,12.921,12.921,0,0,1,8.819.9C12.5-.533,18.508-.064,22.238.974,31.624,3.585,38.972,8.125,43.4,15.682c1.837,3.139,3.185,8.64,1.5,12.931-2.445,6.222-8.445,9.362-15.127,11.363a45.88,45.88,0,0,1-4.6.941l-2.3.209" transform="translate(5.596 5.178)" fill="none" stroke="#3f9fb8" stroke-width="2" fill-rule="evenodd"/>
                </g>
                <g transform="matrix(1, 0, 0, 1, -9.77, -2.77)" filter="url(#filter-plus-teacher)">
                  <path d="M11.179-4.2V2.41H7.7V-4.2H1.092V-7.484H7.7v-6.608h3.478v6.608h6.608V-4.2Z" transform="translate(38.41 46.59)" fill="#3f9fb8" stroke="#3f9fb8" stroke-width="1"/>
                </g>
              </g>
            </svg>
          </button>
        </quantity-selector-component>
      </div>
    </div>

    <!-- Social Samples -->
    <div class="quantity-selector-container">
      <div>
        <label for="rk-social-samples">Freiexemplare für sozial benachteiligte Kinder</label>
        <div>Bis zu 10 % der bezahlten Abos können Sie als Schüler:innen-Freiexemplare beziehen (für soziale Härtefälle).</div>
        <quantity-selector-component class="quantity-selector rk-quantity-selector">
          <button
            class="button quantity-minus button-unstyled"
            type="button"
            name="minus"
            on:click="/decreaseQuantity"
            ref="quantityButtons[]"
          >
            <span class="visually-hidden">{{ 'accessibility.decrease_quantity' | t }}</span>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="95.695" height="86.121" viewBox="0 0 95.695 86.121">
              <defs>
                <clipPath id="clip-path-minus-social">
                  <rect width="56.856" height="51.485" transform="translate(0 0)" fill="none" stroke="#3f9fb8" stroke-width="2"/>
                </clipPath>
                <filter id="filter-minus-social" x="0" y="3.836" width="95.695" height="82.285" filterUnits="userSpaceOnUse">
                  <feOffset dy="7" input="SourceAlpha"/>
                  <feGaussianBlur stdDeviation="13" result="blur"/>
                  <feFlood flood-opacity="0.051"/>
                  <feComposite operator="in" in2="blur"/>
                  <feComposite in="SourceGraphic"/>
                </filter>
              </defs>
              <g transform="translate(9.771)">
                <g transform="matrix(0.819, 0.574, -0.574, 0.819, 29.531, 0)" clip-path="url(#clip-path-minus-social)">
                  <path d="M22.866,41.126C9.956,41.32,4.344,34.281,1.4,24.5a51.483,51.483,0,0,1-1.08-5.228,16.88,16.88,0,0,1-.209-4.949A38.01,38.01,0,0,1,.733,9.861,12.921,12.921,0,0,1,8.819.9C12.5-.533,18.508-.064,22.238.974,31.624,3.585,38.972,8.125,43.4,15.682c1.837,3.139,3.185,8.64,1.5,12.931-2.445,6.222-8.445,9.362-15.127,11.363a45.88,45.88,0,0,1-4.6.941l-2.3.209" transform="translate(5.596 5.178)" fill="none" stroke="#3f9fb8" stroke-width="2" fill-rule="evenodd"/>
                </g>
                <g transform="matrix(1, 0, 0, 1, -9.77, 0)" filter="url(#filter-minus-social)">
                  <path d="M11.179-4.2H1.092V-7.484H17.787V-4.2Z" transform="translate(38.41 43.82)" fill="#3f9fb8" stroke="#3f9fb8" stroke-width="1"/>
                </g>
              </g>
            </svg>
          </button>
          <input
            type="number"
            id="rk-social-samples"
            name="social-samples"
            value="0"
            min="0"
            on:blur="/setQuantity"
            on:focus="/selectInputValue"
            ref="quantityInput"
            aria-label="Freiexemplare Anzahl"
          >
          <button
            class="button quantity-plus button-unstyled"
            type="button"
            name="plus"
            on:click="/increaseQuantity"
            ref="quantityButtons[]"
          >
            <span class="visually-hidden">{{ 'accessibility.increase_quantity' | t }}</span>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="95.695" height="95.502" viewBox="0 0 95.695 95.502">
              <defs>
                <clipPath id="clip-path-plus-social">
                  <rect width="56.856" height="51.485" transform="translate(0 0)" fill="none" stroke="#3f9fb8" stroke-width="2"/>
                </clipPath>
                <filter id="filter-plus-social" x="0" y="0" width="95.695" height="95.502" filterUnits="userSpaceOnUse">
                  <feOffset dy="7" input="SourceAlpha"/>
                  <feGaussianBlur stdDeviation="13" result="blur"/>
                  <feFlood flood-opacity="0.051"/>
                  <feComposite operator="in" in2="blur"/>
                  <feComposite in="SourceGraphic"/>
                </filter>
              </defs>
              <g transform="translate(9.771 2.773)">
                <g transform="matrix(0.819, 0.574, -0.574, 0.819, 29.531, 0)" clip-path="url(#clip-path-plus-social)">
                  <path d="M22.866,41.126C9.956,41.32,4.344,34.281,1.4,24.5a51.483,51.483,0,0,1-1.08-5.228,16.88,16.88,0,0,1-.209-4.949A38.01,38.01,0,0,1,.733,9.861,12.921,12.921,0,0,1,8.819.9C12.5-.533,18.508-.064,22.238.974,31.624,3.585,38.972,8.125,43.4,15.682c1.837,3.139,3.185,8.64,1.5,12.931-2.445,6.222-8.445,9.362-15.127,11.363a45.88,45.88,0,0,1-4.6.941l-2.3.209" transform="translate(5.596 5.178)" fill="none" stroke="#3f9fb8" stroke-width="2" fill-rule="evenodd"/>
                </g>
                <g transform="matrix(1, 0, 0, 1, -9.77, -2.77)" filter="url(#filter-plus-social)">
                  <path d="M11.179-4.2V2.41H7.7V-4.2H1.092V-7.484H7.7v-6.608h3.478v6.608h6.608V-4.2Z" transform="translate(38.41 46.59)" fill="#3f9fb8" stroke="#3f9fb8" stroke-width="1"/>
                </g>
              </g>
            </svg>
          </button>
        </quantity-selector-component>
      </div>
    </div>
  </div>

  <style>
    .rk-free-samples { 
      margin: 1rem 0; 
    }
    
    .rk-sample-group { 
      display: flex; 
      align-items: center; 
      gap: 1rem; 
      margin-bottom: 1rem; 
      padding: 0.75rem; 
      background: white; 
      border-radius: 6px; 
      border: 1px solid #dee2e6; 
    }
    
    .rk-sample-group span { 
      font-size: 1.25rem; 
      width: 2rem; 
      text-align: center; 
    }
    
    .rk-sample-group > div { 
      flex: 1; 
    }
    
    .rk-sample-group label { 
      display: block; 
      font-weight: 500; 
      color: #495057; 
      margin-bottom: 0.5rem; 
      font-size: 0.9rem; 
    }


.product-details .priceContainer .price {
    font-size: 34px !important;
    color: #E30613 !important;
}
    
    /* Ensure the quantity selector uses the theme's default styles */
    .rk-quantity-selector {
      margin-top: 0.25rem;
    }
  </style>

  <script>
(function() {
  const freeSamplesContainer = document.querySelector('.rk-free-samples');
  const teacherInput = document.getElementById('rk-teacher-samples');
  const socialInput = document.getElementById('rk-social-samples');

  // Product IDs from Custom Fields
  const lehrerexemplarId = {{ product.metafields.custom.lehrerexemplar_id }};
  const freiexemplarId = {{ product.metafields.custom.freiexemplar_id }};

  console.log('🚀 RK Free Samples Widget loaded for product {{ product.id }}');
  console.log('📋 Custom Fields:', { lehrerexemplarId, freiexemplarId });

  // ============================================================================
  // VARIANT CHANGE DETECTION - Hide/Show based on variant selection
  // ============================================================================
  
  function checkVariantAndToggleDisplay() {
    // Find the "Jahresabo" option in variant picker
    const jahresaboFieldset = document.querySelector('fieldset[data-option-id*="jahresabo"]');
    
    if (!jahresaboFieldset) {
      console.log('⚠️ No Jahresabo fieldset found');
      return;
    }

    // Find the checked radio button
    const checkedRadio = jahresaboFieldset.querySelector('input[type="radio"]:checked');
    
    if (!checkedRadio) {
      console.log('⚠️ No checked radio found');
      return;
    }

    // Get the value (e.g., "Privatabo" or "Schüler:innen Abo")
    const selectedValue = checkedRadio.value;
    console.log('� Selected Jahresabo value:', selectedValue);

    // Check if "Privatabo" is selected
    const isPrivatabo = selectedValue.toLowerCase().includes('privatabo');
    console.log('🏷️ Is Privatabo variant?', isPrivatabo);

    // Show/hide free samples display
    if (freeSamplesContainer) {
      if (isPrivatabo) {
        freeSamplesContainer.style.display = 'none';
        console.log('✅ Free samples hidden (Privatabo selected)');
        
        // Reset quantities
        if (teacherInput) teacherInput.value = '0';
        if (socialInput) socialInput.value = '0';
      } else {
        freeSamplesContainer.style.display = 'block';
        console.log('✅ Free samples shown (other variant selected)');
      }
    }
  }

  // Check on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkVariantAndToggleDisplay);
  } else {
    checkVariantAndToggleDisplay();
  }

  // Listen for variant changes - direct radio button events
  document.addEventListener('change', function(event) {
    // Check if the changed element is a Jahresabo radio button
    if (event.target.matches('input[type="radio"][name*="Jahresabo"]')) {
      console.log('🔄 Jahresabo radio changed:', event.target.value);
      checkVariantAndToggleDisplay();
    }
  });

  // Also listen for variant:change events (if theme dispatches them)
  document.addEventListener('variant:change', function(event) {
    console.log('🔄 Variant changed event:', event.detail);
    setTimeout(checkVariantAndToggleDisplay, 100);
  });

  // Watch for variant picker updates with MutationObserver as fallback
  const variantPicker = document.querySelector('variant-picker');
  if (variantPicker) {
    const observer = new MutationObserver(() => {
      console.log('👁️ Variant picker DOM changed');
      checkVariantAndToggleDisplay();
    });

    observer.observe(variantPicker, {
      attributes: true,
      childList: true,
      subtree: true
    });
  }

  console.log('🎯 Starting comprehensive debugging...');

  // DEBUG: Log all available buttons on page
  setTimeout(() => {
    const allButtons = document.querySelectorAll('button');
    console.log('🔍 All buttons found on page:', Array.from(allButtons).map(btn => ({
      id: btn.id,
      classes: btn.className,
      text: btn.textContent?.trim().substring(0, 50),
      name: btn.name,
      type: btn.type
    })));

    // Try to find the add to cart button with various selectors
    const selectors = [
      '#BuyButtons-ProductSubmitButton-AUXVBUC9GTi9GRnE5W__add-to-cart',
      'button[name="add"]',
      '.add-to-cart-button',
      'button[type="submit"]',
      '[data-submit-button]',
      '.btn--add-to-cart',
      '.product-form-button'
    ];

    selectors.forEach(selector => {
      const element = document.querySelector(selector);
      if (element) {
        console.log(`✅ Found element with selector "${selector}":`, element);
      } else {
        console.log(`❌ No element found with selector "${selector}"`);
      }
    });
  }, 1000);

  // Button handlers - Framework handles the quantity changes via on:click
  // We need to add validation for the 10% rule
  console.log('✅ Free sample inputs initialized:', { teacherInput, socialInput });

  // Get the quantity-selector-components
  const teacherComponent = teacherInput.closest('quantity-selector-component');
  const socialComponent = socialInput.closest('quantity-selector-component');
  
  console.log('🔍 Found components:', { teacherComponent, socialComponent });

  // Override the quantity change validation
  const validateAndSetQuantity = (input, component) => {
    const mainQty = getMainQuantity();
    
    // Determine if this is teacher or social input
    const isTeacherInput = input.id === 'rk-teacher-samples';
    
    // Calculate max allowed based on 10% rule
    const maxAllowedPerType = Math.floor(mainQty * 0.1);
    
    // Effective limits
    let maxAllowed;
    if (isTeacherInput) {
      // Teacher samples: minimum 2 if >= 3 main products, otherwise 10%
      const hasMinimumForTeacherSamples = mainQty >= 3;
      const minTeacherSamplesAllowed = hasMinimumForTeacherSamples ? 2 : 0;
      maxAllowed = Math.max(maxAllowedPerType, minTeacherSamplesAllowed);
    } else {
      // Social samples: always 10%
      maxAllowed = maxAllowedPerType;
    }
    
    let value = parseInt(input.value) || 0;
    
    console.log('🔍 Validating:', { 
      input: input.id, 
      value, 
      maxAllowedPerType,
      maxAllowed, 
      mainQty,
      isTeacherInput
    });

    if (value > maxAllowed) {
      value = maxAllowed;
      input.value = maxAllowed;
      
      if (isTeacherInput && mainQty >= 3 && maxAllowed > maxAllowedPerType) {
        showNotification(`Maximum erreicht: ${maxAllowed} Stück (Mindestens 2 bei ≥3 Hauptprodukten)`, 'warning');
      } else {
        showNotification(`Maximum erreicht: ${maxAllowed} Stück (10% von ${mainQty})`, 'warning');
      }
      return false;
    }
    
    if (value < 0) {
      value = 0;
      input.value = 0;
      return false;
    }
    
    return true;
  };

  // Override component methods to add our validation
  // Wait for components to be fully initialized
  const setupComponentOverrides = () => {
    if (teacherComponent && typeof teacherComponent.increaseQuantity === 'function') {
      
      teacherComponent.increaseQuantity = function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const mainQty = getMainQuantity();
        
        // Special rule: If 3 or more main products, always allow at least 2 teacher samples
        const hasMinimumForTeacherSamples = mainQty >= 3;
        const minTeacherSamplesAllowed = hasMinimumForTeacherSamples ? 2 : 0;
        
        // Calculate max allowed based on 10% rule
        const maxAllowedPerType = Math.floor(mainQty * 0.1);
        
        // Effective limit for teacher samples
        const maxAllowed = Math.max(maxAllowedPerType, minTeacherSamplesAllowed);
        
        const currentValue = parseInt(teacherInput.value) || 0;
        
        console.log('➕ Teacher increase clicked:', { 
          currentValue, 
          mainQty,
          maxAllowedPerType,
          minTeacherSamplesAllowed,
          maxAllowed,
          hasMinimumForTeacherSamples
        });
        
        if (currentValue >= maxAllowed) {
          if (hasMinimumForTeacherSamples) {
            showNotification(`Maximum erreicht: ${maxAllowed} Stück (Mindestens ${minTeacherSamplesAllowed} bei ≥3 Hauptprodukten)`, 'warning');
          } else {
            showNotification(`Maximum erreicht: ${maxAllowed} Stück (10% von ${mainQty})`, 'warning');
          }
          return;
        }
        
        // Manually increment
        teacherInput.value = currentValue + 1;
        teacherInput.dispatchEvent(new Event('change', { bubbles: true }));
      };
      
      teacherComponent.decreaseQuantity = function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const currentValue = parseInt(teacherInput.value) || 0;
        
        console.log('➖ Teacher decrease clicked:', { currentValue });
        
        if (currentValue <= 0) {
          return;
        }
        
        // Manually decrement
        teacherInput.value = currentValue - 1;
        teacherInput.dispatchEvent(new Event('change', { bubbles: true }));
      };
      
      console.log('✅ Teacher component methods overridden');
    } else {
      console.warn('⚠️ Teacher component not ready yet');
    }

    if (socialComponent && typeof socialComponent.increaseQuantity === 'function') {
      
      socialComponent.increaseQuantity = function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const mainQty = getMainQuantity();
        
        // Social samples: always 10% of main products
        const maxAllowed = Math.floor(mainQty * 0.1);
        
        const currentValue = parseInt(socialInput.value) || 0;
        
        console.log('➕ Social increase clicked:', { 
          currentValue, 
          mainQty,
          maxAllowed
        });
        
        if (currentValue >= maxAllowed) {
          showNotification(`Maximum erreicht: ${maxAllowed} Stück (10% von ${mainQty})`, 'warning');
          return;
        }
        
        // Manually increment
        socialInput.value = currentValue + 1;
        socialInput.dispatchEvent(new Event('change', { bubbles: true }));
      };
      
      socialComponent.decreaseQuantity = function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        const currentValue = parseInt(socialInput.value) || 0;
        
        console.log('➖ Social decrease clicked:', { currentValue });
        
        if (currentValue <= 0) {
          return;
        }
        
        // Manually decrement
        socialInput.value = currentValue - 1;
        socialInput.dispatchEvent(new Event('change', { bubbles: true }));
      };
      
      console.log('✅ Social component methods overridden');
    } else {
      console.warn('⚠️ Social component not ready yet');
    }
  };

  // Try to setup immediately
  setupComponentOverrides();
  
  // Also try after a delay in case components initialize later
  setTimeout(setupComponentOverrides, 100);
  setTimeout(setupComponentOverrides, 500);

  // Listen to input changes with multiple event types
  [teacherInput, socialInput].forEach(input => {
    const component = input.closest('quantity-selector-component');
    
    // Standard input events
    ['input', 'change', 'blur'].forEach(eventType => {
      input.addEventListener(eventType, function() {
        validateAndSetQuantity(this, component);
      });
    });
    
    // Framework event
    input.addEventListener('QuantitySelectorUpdateEvent', function(event) {
      setTimeout(() => validateAndSetQuantity(this, component), 10);
    });
  });

  // Helper function to get main product quantity
  function getMainQuantity() {
    const quantityInput = document.querySelector('input[name="quantity"]') || 
                         document.querySelector('[name="quantity"]') ||
                         document.querySelector('#Quantity') ||
                         document.querySelector('.quantity-input');
    
    const qty = parseInt(quantityInput?.value) || 1;
    console.log('📊 Main product quantity:', qty);
    return qty;
  }

  function showNotification(message, type = 'success') {
    // Erstelle temporäre Benachrichtigung
    const notification = document.createElement('div');
    const backgroundColor = type === 'warning' ? '#ffc107' : '#28a745';
    const textColor = type === 'warning' ? '#000' : '#fff';

    notification.style.cssText = `
      position: fixed;
      top: 80px;
      right: 20px;
      background: ${backgroundColor};
      color: ${textColor};
      padding: 12px 24px;
      border-radius: 6px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 10000;
      font-family: system-ui, -apple-system, sans-serif;
      font-size: 14px;
      animation: slideIn 0.3s ease-out;
      max-width: 300px;
      word-wrap: break-word;
    `;

    // Add slide-in animation if not already present
    if (!document.querySelector('#rk-notification-styles')) {
      const style = document.createElement('style');
      style.id = 'rk-notification-styles';
      style.textContent = `
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
      `;
      document.head.appendChild(style);
    }

    notification.textContent = message;
    document.body.appendChild(notification);

    // Remove after 3 seconds
    setTimeout(() => {
      notification.style.animation = 'slideIn 0.3s ease-out reverse';
      setTimeout(() => {
        if (notification.parentNode) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Helper function to trigger cart update events
  function triggerCartUpdateEvents() {
    console.log('🔔 Triggering cart update events');
    
    // Dispatch common cart update events
    document.dispatchEvent(new CustomEvent('cart:updated'));
    document.dispatchEvent(new CustomEvent('cart:refresh'));
    
    // Trigger theme-specific events if they exist
    if (window.theme && window.theme.cart) {
      if (typeof window.theme.cart.update === 'function') {
        window.theme.cart.update();
      }
    }
  }

  // ============================================================================
  // SIMPLE APPROACH: Only intercept the Add-to-Cart button click
  // ============================================================================
  
  const originalFetch = window.fetch; // Store for use in handleCartAdd
  let handlingCartAdd = false;
  let lastHandleCartAddTime = 0;
  let lastNotificationTime = 0;

  console.log('🎯 Setting up add-to-cart button listener...');

  function findAndAttachToButton() {
    const selectors = [
      'button[name="add"]',
      'button[type="submit"][name="add"]',
      '.add-to-cart-button',
      'form[action*="/cart/add"] button[type="submit"]'
    ];

    for (const selector of selectors) {
      const button = document.querySelector(selector);
      if (button) {
        console.log('✅ Found add-to-cart button:', selector);
        
        // Attach click listener
        button.addEventListener('click', function(e) {
          console.log('🖱️ Add-to-cart button clicked!');
          
          const teacherQty = parseInt(teacherInput.value) || 0;
          const socialQty = parseInt(socialInput.value) || 0;

          console.log('📝 Free samples selected:', { teacherQty, socialQty });

          if (teacherQty > 0 || socialQty > 0) {
            console.log('✅ Will add free samples after main product');
            
            // Wait for main product to be added first
            setTimeout(() => {
              handleCartAdd({ source: 'button-click' });
            }, 1800); // Wait 1.8 seconds
          } else {
            console.log('ℹ️ No free samples selected');
          }
        }, true); // Use capture to run early
        
        console.log('✅ Listener attached to button');
        return true;
      }
    }
    
    console.warn('⚠️ Button not found, will retry...');
    return false;
  }

  // Try to find button, retry if not found
  if (!findAndAttachToButton()) {
    setTimeout(findAndAttachToButton, 500);
    setTimeout(findAndAttachToButton, 1000);
  }

  async function handleCartAdd(event) {
    const now = Date.now();
    const MIN_TIME_BETWEEN_CALLS = 3000; // 3 seconds minimum
    
    if (handlingCartAdd || (now - lastHandleCartAddTime) < MIN_TIME_BETWEEN_CALLS) {
      console.log('🚫 Skipping - already handled recently (', now - lastHandleCartAddTime, 'ms ago)');
      return;
    }

    handlingCartAdd = true;
    lastHandleCartAddTime = now;
    console.log('🔄 handleCartAdd started, source:', event?.source || 'unknown');

    // Wait for main product to be added, then add free samples
    setTimeout(async () => {
      try {
        const teacherQty = parseInt(teacherInput.value) || 0;
        const socialQty = parseInt(socialInput.value) || 0;

        console.log('🎯 Checking free samples:', { 
          teacherQty, 
          socialQty, 
          lehrerexemplarId, 
          freiexemplarId 
        });

        if (teacherQty === 0 && socialQty === 0) {
          console.log('🚫 No free samples selected');
          handlingCartAdd = false;
          return;
        }

        // Add teacher samples
        if (teacherQty > 0 && lehrerexemplarId) {
          console.log('📚 Adding teacher sample - ID:', lehrerexemplarId, 'Qty:', teacherQty);
          try {
            const response = await originalFetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: lehrerexemplarId,
                  quantity: teacherQty,
                  properties: {
                    '_main_product': '{{ product.title }}',
                    '_type': 'Lehrerexemplar'
                  }
                }]
              })
            });

            if (response.ok) {
              console.log('✅ Teacher sample added');
            } else {
              console.error('❌ Teacher sample failed:', await response.text());
            }
          } catch (error) {
            console.error('❌ Teacher sample error:', error);
          }
        }

        // Add social samples
        if (socialQty > 0 && freiexemplarId) {
          console.log('🤝 Adding social sample - ID:', freiexemplarId, 'Qty:', socialQty);
          try {
            const response = await originalFetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: freiexemplarId,
                  quantity: socialQty,
                  properties: {
                    '_main_product': '{{ product.title }}',
                    '_type': 'Schülerfreiexemplar'
                  }
                }]
              })
            });

            if (response.ok) {
              console.log('✅ Social sample added');
            } else {
              console.error('❌ Social sample failed:', await response.text());
            }
          } catch (error) {
            console.error('❌ Social sample error:', error);
          }
        }

        // Show notification
        const notificationNow = Date.now();
        if (notificationNow - lastNotificationTime > 5000) {
          const totalSamples = teacherQty + socialQty;
          showNotification(`${totalSamples} Freiexemplar(e) hinzugefügt!`);
          lastNotificationTime = notificationNow;
        }

        // Trigger cart update
        setTimeout(() => {
          triggerCartUpdateEvents();
          console.log('✅ Free samples complete');
        }, 300);

      } catch (error) {
        console.error('❌ handleCartAdd error:', error);
      } finally {
        setTimeout(() => {
          handlingCartAdd = false;
          console.log('🔓 Reset handlingCartAdd flag');
        }, 3000);
      }
    }, 200); // Small delay to ensure main product is being processed
  }

  // End of free samples integration
})();
  </script>
{% endif %}
